" ***************************************
" ***  Define plugins
" ***************************************

packadd! matchit

call plug#begin('~/.vim/plugged')

Plug 'gcmt/wildfire.vim'
Plug 'janko-m/vim-test'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'jqno/vim-extract-variable'
Plug 'jqno/vim-textobj-functioncall' | Plug 'kana/vim-textobj-user'
Plug 'jqno/vim-reversal'
Plug 'jqno/fzf.vim' | Plug '/usr/local/opt/fzf' " This is my fork
Plug 'ludovicchabant/vim-gutentags'
Plug 'prabirshrestha/async.vim'
" Keep specified version until this issue is fixed: https://github.com/prabirshrestha/vim-lsp/issues/377
Plug 'prabirshrestha/vim-lsp', { 'commit': 'cf257bcd87f7bbca46fa2b29474a146593483905' }
Plug 'rizzatti/dash.vim'
Plug 'RRethy/vim-hexokinase'
Plug 'rhysd/git-messenger.vim'
Plug 'scrooloose/nerdtree', { 'on': ['NERDTree', 'NERDTreeToggle'] }  " I know, I know. It's just that netrw is incredibly weird and buggy when g:netrw_liststype = 3
Plug 'sheerun/vim-polyglot'
Plug 'SirVer/ultisnips'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'vimwiki/vimwiki', { 'on': 'VimwikiIndex' }
Plug 'whiteinge/diffconflicts'
Plug 'wincent/terminus'
Plug 'w0rp/ale'

call plug#end()



" ***************************************
" ***  Behavior
" ***************************************

" Always use UTF-8
scriptencoding utf-8
" Put swap files and backups in . only as a last resort
set directory-=.
set directory+=.
set backupdir-=.
set backupdir+=.
" Store a big chunk of : command history
set history=1000
" Automatically re-read file in current buffer if it was edited outside vim
set autoread
" Enable filetypes and syntax
filetype plugin indent on
syntax on
" Leaders
let g:mapleader="\<space>"
let g:maplocalleader=','
" Indent automatically
set autoindent
" Backspace over indents, eols, line-starts: just like normal editors
set backspace=indent,eol,start
" Don't recognise octal numbers with <C-A> and <C-X>
set nrformats-=octal
" Search more easily
set incsearch hlsearch ignorecase smartcase
" Don't wrap lines, but if you do, don't wrap in the middle of a word
set nowrap linebreak
" Join lines more intuitively
set nojoinspaces
set formatoptions+=j
" Smart diffing
set diffopt+=indent-heuristic,algorithm:patience
" Enhanced command-line completion
set wildmenu
" Always ignore node_modules
set wildignore=node_modules
" Completion
set completeopt+=menuone,noinsert


" Tags are stored in the project's .git folder
" This strategy requires vim-fugitive and Gutentags
let g:gutentags_ctags_tagfile='.git/tags'
set notagrelative

augroup vimStartup
    autocmd!

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid, when inside an event handler
    " (happens when dropping a file on gvim) and for a commit message (it's
    " likely a different one than last time).
    autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
      \ |   exe "normal! g`\""
      \ | endif
augroup END



" ***************************************
" ***  Copy/paste
" ***************************************

" Yank everything into the + register so it goes on to the system clipboard
nnoremap Y "+y
vnoremap Y "+y



" ***************************************
" ***  Appearance
" ***************************************

" Make it look purty (but suppress the error if the colorscheme doesn't exist)
silent! colorscheme reversal
set background=dark
set termguicolors
" Highlight merge conflict markers
match ErrorMsg '^\(<\|=\||\|>\)\{7\}\([^=].\+\)\?$'
" Always show the sign column so it doesn't appear and disappear all the time
set signcolumn=yes
" See context while scrolling
set scrolloff=1
set sidescrolloff=5
" Show as much as possible of lines that don't fit in the screen
set display+=lastline
" Show relative line-numbers
set number relativenumber



" ***************************************
" ***  Silly shift-pressing mistakes
" ***************************************

if has('user_commands')
    command! -bang -nargs=* -complete=file E e<bang> <args>
    command! -bang -nargs=* -complete=file W w<bang> <args>
    command! -bang -nargs=* -complete=file Wq wq<bang> <args>
    command! -bang -nargs=* -complete=file WQ wq<bang> <args>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
    command! -bang Q q<bang>
    command! -bang QA qa<bang>
    command! -bang Qa qa<bang>
endif



" ***************************************
" ***  GVIM configuration
" ***************************************
if has('gui_running')

    " Use a nice font with ligatures
    set guifont=Fira\ Code\ Retina:h13
    if has('gui_macvim')
        set macligatures
    endif

endif



" ***************************************
" ***  Plugin configurations
" ***************************************

" *** ALE
" Run linting on save only
let g:ale_lint_on_text_changed = 'never'
" Put the results in the quickfix list instead of the location list
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1

" *** FZF
let g:fzf_command_prefix = 'Fzf'
" Key mappings within FZF to define how to open a file
let g:fzf_action = {
    \ 'enter': 'e',
    \ 'space': 'split'
    \ }

" *** Git-messenger.vim
let g:git_messenger_no_default_mappings = v:true
let g:git_messenger_include_diff = 'current'

" *** Hexokinase
let g:Hexokinase_ftAutoload = ['css', 'scss', 'html']
let g:Hexokinase_refreshEvents = ['BufWritePost']

" *** UltiSnips
let g:UltiSnipsExpandTrigger = '<S-Tab>'

" *** Vim-Test
let test#strategy = 'dispatch'

" *** VimWiki
let g:vimwiki_list = [{'path': '~/Dropbox/vimwiki', 'syntax': 'markdown', 'ext': '.md'}]
let g:vimwiki_global_ext = 0
let g:vimwiki_folding = 'expr'

" *** Wildfire
let g:wildfire_objects = ["i'", 'i"', 'i)', 'i]', 'i}', 'if', 'ip', 'it']



" ***************************************
" ***  VIM itself!
" ***************************************

" Open vimrc
:command! EditVimrc e ~/.vim/vimrc
" Reload vimrc
:command! ReloadVimrc source ~/.vim/vimrc
" Reload vimrc whenever it's written
augroup AutoSourceVimrc
    autocmd!
    autocmd BufWritePost vimrc ReloadVimrc
augroup END



" ***************************************
" ***  File types
" ***************************************

augroup pom
    autocmd!
    autocmd BufRead pom.xml compiler maven
augroup END



" ***************************************
" ***  Statusline
" ***************************************

set laststatus=2          " always show statusline
set statusline=           " clear statusline
set statusline+=%f        " short filename
set statusline+=%m        " modified flag
set statusline+=%h        " help flag
set statusline+=%w        " preview window flag
set statusline+=%r        " readonly flag
set statusline+=%=        " right align
set statusline+=%y        " file type
set statusline+=[%{strlen(&fenc)?&fenc:'none'}] " file encoding
set statusline+=[%{&ff}]  " file format
set statusline+=\         " space
set statusline+=#%n       " buffer number
set statusline+=\         " space
set statusline+=%l        " current line
set statusline+=:         " colon
set statusline+=%c        " current column
set statusline+=\         " space
set statusline+=%P        " percentage through the file



" ***************************************
" ***  Terminal mode configuration
" ***************************************

" Easier access to Normal mode in Terminal
tnoremap <S-Esc> <C-\><C-N>
" Split navigation
tnoremap <C-H> <C-W>h
tnoremap <C-J> <C-W>j
tnoremap <C-K> <C-W>k
tnoremap <C-L> <C-W>l



" ***************************************
" ***  Mappings
" ***************************************

" *** No prefix: general mappings

" Pressing up in a long line gets you to the above line 'in the screen',
" but if you precede it with a count, you get the old behavior
" and if the count > 5, we'll also add it to the jump list so we can do C-O and C-I
nnoremap <expr> j v:count ? (v:count > 5 ? "m'" . v:count : '') . 'j' : 'gj'
nnoremap <expr> k v:count ? (v:count > 5 ? "m'" . v:count : '') . 'k' : 'gk'
vnoremap <expr> j v:count ? (v:count > 5 ? "m'" . v:count : '') . 'j' : 'gj'
vnoremap <expr> k v:count ? (v:count > 5 ? "m'" . v:count : '') . 'k' : 'gk'

" Keep the visual selection after < and > so we can repeat these buttons
" instead of tring to find .
vnoremap < <gv
vnoremap > >gv
" Allow for easy window switching
nnoremap <C-H> <C-W>h
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-L> <C-W>l
" Allow for easy window resizing
" (˙∆˚¬ are Alt+hjkl on macOS)
noremap <silent> ˙ :call ResizeLikeTmux('h', 1)<CR>
noremap <silent> ∆ :call ResizeLikeTmux('j', 1)<CR>
noremap <silent> ˚ :call ResizeLikeTmux('k', 1)<CR>
noremap <silent> ¬ :call ResizeLikeTmux('l', 1)<CR>
" Mappings for vim-commentary
xmap \ <Plug>Commentary
nmap \ <Plug>Commentary
omap \ <Plug>Commentary
nmap \\ <Plug>CommentaryLine
nmap <leader>\ <Plug>Commentary<Plug>Commentary
" Mappings from Unimpaired that I actually use
map <silent> [b :bprevious<CR>
map <silent> ]b :bnext<CR>
map <silent> [q :cprevious<CR>
map <silent> ]q :cnext<CR>
map <silent> [Q :cfirst<CR>
map <silent> ]Q :clast<CR>
" Handy ALE mappings in Unimpaired style
map <silent> [W <Plug>(ale_first)
map <silent> [w <Plug>(ale_previous)
map <silent> ]w <Plug>(ale_next)
map <silent> ]W <Plug>(ale_last)
" Center on the line with the match when searching
nnoremap n nzz
nnoremap N Nzz
" When finding `=` include the whitespace around it
nnoremap t= /\s*=<CR>:nohls<CR>
nnoremap T= ?=\s*?e<CR>:nohls<CR>
" ToggleMovement : 0 moves to beginning of text first, then to beginning of line
nnoremap <silent> 0 :call ToggleMovement('^', '0')<CR>
" Open VimWiki
nnoremap <F12> :VimwikiIndex<CR>

" Close extraneous windows
nnoremap <leader><Esc> :pclose<CR>:cclose<CR>:lclose<CR>

" *** Prefix <leader><leader>: change settings
nnoremap <silent> <leader><leader>2 :call SetTabstop(2)<CR>:echo "Indentation level: 2"<CR>
nnoremap <silent> <leader><leader>4 :call SetTabstop(4)<CR>:echo "Indentation level: 4"<CR>
nnoremap <silent> <leader><leader>8 :call SetTabstop(8)<CR>:echo "Indentation level: 8"<CR>
nnoremap <silent> <leader><leader>0 :set noexpandtab nosmarttab tabstop=4 shiftwidth=4 softtabstop=4<CR>:echo "Indentation level: tab"<CR>
nnoremap <silent> <leader><leader>b :GitMessenger<CR>
nnoremap <silent> <leader><leader>t :call ToggleListChars()<CR>
nnoremap <silent> <leader><leader>w :call ToggleWrap()<CR>
nnoremap <silent> <leader><leader>/ :nohlsearch<CR>

" *** Prefix <leader>f: finding things
nnoremap <leader>fb :FzfBuffers<CR>
nnoremap <leader>ff :FzfFiles<CR>
nnoremap <leader>fg :FzfAg<Space>
nnoremap <leader>fh :FzfHelptags<CR>
nnoremap <leader>ft :FzfTags<CR>
nnoremap <leader>fo :FzfBTags<CR>
nnoremap <leader>f* "ayiw:FzfAg <C-R>a<CR>
nnoremap <leader>f] :sp<CR>:exec("tag " . expand("<cword>"))<CR>
nnoremap <leader>fh :Dash<CR>
nnoremap <leader>fn :NERDTreeToggle<CR>

" *** Prefix <leader>m: running make
nnoremap <leader>mm :Make<CR>
nnoremap <leader>mf :ALEFix<CR>

" *** Prefix <leader>t: running tests
nnoremap <leader>ta :TestSuite<CR>
nnoremap <leader>tf :TestFile<CR>
nnoremap <leader>tt :TestNearest<CR>

" *** Prefix <leader>r: refactorings
nmap <space>rv <Plug>(extractVariableNormal)
vmap <space>rv <Plug>(extractVariableVisual)

" *** Prefix <leader>b: buffers
nnoremap <silent> <leader>bb :b#<CR>
nnoremap <silent> <leader>bd :bp\|bd #<CR>

" *** Prefix <leader>w: windows
nnoremap <leader>w_ <C-W>_
nnoremap <leader>w= <C-W>=

" *** Command-line mode
" Expand %% to the directory of the currently open file, in Command-Line mode.
" # is the 'other' file, because % would be the Command-Line window itself.
cnoremap %% <C-R>=expand('#:h').'/'<CR>

