" ***************************************
" ***  Define plugins
" ***************************************

packadd! matchit
runtime ftplugin/man.vim

call plug#begin('~/.vim/plugged')

Plug 'chrisbra/Colorizer'
Plug 'christoomey/vim-tmux-navigator'
Plug 'dense-analysis/ale'
Plug 'drzel/vim-line-no-indicator'
Plug 'gcmt/wildfire.vim'
Plug 'janko-m/vim-test'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'jqno/jqno-autoclose.vim'
Plug 'jqno/jqno-extractvariable.vim'
Plug 'jqno/jqno-tab.vim'
Plug 'jqno/jqno-textobj-functioncall.vim' | Plug 'kana/vim-textobj-user'
Plug 'jqno/reversal.vim'
Plug 'junegunn/fzf.vim' | Plug '/usr/local/opt/fzf'
Plug 'junegunn/goyo.vim'
Plug 'liuchengxu/vista.vim'
Plug 'ludovicchabant/vim-gutentags'
Plug 'machakann/vim-sandwich'
Plug 'machakann/vim-swap'
Plug 'natebosch/vim-lsc'
Plug 'plasticboy/vim-markdown'
Plug 'RGBD/vim-xml-indent'
Plug 'rizzatti/dash.vim'
Plug 'romainl/vim-cool'
Plug 'scrooloose/nerdtree', { 'on': ['NERDTree', 'NERDTreeToggle', 'NERDTreeFind', 'NERDTreeClose'] }  " I know, I know. It's just that netrw is incredibly weird and buggy when g:netrw_liststype = 3
Plug 'sheerun/vim-polyglot'
Plug 'SirVer/ultisnips'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'whiteinge/diffconflicts'
Plug 'wincent/terminus'

call plug#end()



" ***************************************
" ***  Behavior
" ***************************************

" Always use UTF-8
scriptencoding utf-8
" Put swap files and backups in . only as a last resort
set directory-=.
set directory+=.
set backupdir-=.
set backupdir+=.
" Store a big chunk of : command history
set history=1000
" Automatically re-read file in current buffer if it was edited outside vim
set autoread
" Enable filetypes and syntax
filetype plugin indent on
syntax on
" Leaders
let g:mapleader="\<space>"
let g:maplocalleader=','
" Indent automatically
set autoindent
" Backspace over indents, eols, line-starts: just like normal editors
set backspace=indent,eol,start
" Align indents with < and > with indent
set shiftround
" Don't recognise octal numbers with <C-A> and <C-X>
set nrformats-=octal
" Search more easily
set incsearch hlsearch ignorecase smartcase
" Don't wrap lines, but if you do, don't wrap in the middle of a word
set nowrap linebreak
" Join lines more intuitively
set nojoinspaces
set formatoptions+=j
" Managing splits
set splitbelow splitright
" Smart diffing
set diffopt+=indent-heuristic,algorithm:patience
" Enhanced command-line completion
set wildmenu
" Always ignore node_modules
set wildignore=node_modules
" Completion
set completeopt+=menuone,noinsert
set shortmess+=c

augroup vimStartup
    autocmd!

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid, when inside an event handler
    " (happens when dropping a file on gvim) and for a commit message (it's
    " likely a different one than last time).
    autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
      \ |   exe "normal! g`\""
      \ | endif
augroup END



" ***************************************
" ***  Copy/paste
" ***************************************

" Yank everything into the + register so it goes on to the system clipboard
nnoremap Y "+y
vnoremap Y "+y



" ***************************************
" ***  Appearance
" ***************************************

" Make it look purty (but suppress the error if the colorscheme doesn't exist)
set background=dark
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
silent! colorscheme reversal
" Highlight merge conflict markers
match ErrorMsg '^\(<\|=\||\|>\)\{7\}\([^=].\+\)\?$'
" Always show the sign column so it doesn't appear and disappear all the time
set signcolumn=yes
" See context while scrolling
set scrolloff=1
set sidescrolloff=5
" Show as much as possible of lines that don't fit in the screen
set display+=lastline
" Show relative line-numbers
set number relativenumber



" ***************************************
" ***  Sessions
" ***************************************

" Don't save mappings and options: vimrc will take care of those
set sessionoptions-=options
" Always overwrite Session.vim in the current directory
command! SaveSession mksession! Session.vim<bar>echo "Saved Session.vim"
" Always load Session.vim from the current directory
command! LoadSession source Session.vim



" ***************************************
" ***  Silly shift-pressing mistakes
" ***************************************

if has('user_commands')
    command! -bang -nargs=* -complete=file E e<bang> <args>
    command! -bang -nargs=* -complete=file W w<bang> <args>
    command! -bang -nargs=* -complete=file Wq wq<bang> <args>
    command! -bang -nargs=* -complete=file WQ wq<bang> <args>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
    command! -bang Q q<bang>
    command! -bang QA qa<bang>
    command! -bang Qa qa<bang>
endif



" ***************************************
" ***  Terminal mode configuration
" ***************************************

" Easier access to Normal mode in Terminal
tnoremap <F1> <C-\><C-N>
" " Split navigation
tnoremap <C-H> <C-\><C-N>:TmuxNavigateLeft<CR>
tnoremap <C-J> <C-\><C-N>:TmuxNavigateDown<CR>
tnoremap <C-K> <C-\><C-N>:TmuxNavigateUp<CR>
tnoremap <C-L> <C-\><C-N>:TmuxNavigateRight<CR>



" ***************************************
" ***  GVIM configuration
" ***************************************
if has('gui_running')

    " Use a nice font with ligatures
    set guifont=Fira\ Code\ Retina:h13
    if has('gui_macvim')
        set macligatures
    endif

endif



" ***************************************
" ***  VIM itself!
" ***************************************

" Open vimrc
command! EditVimrc e ~/.vim/vimrc
" Reload vimrc
command! ReloadVimrc source ~/.vim/vimrc<bar>doautocmd ColorScheme
" Reload vimrc whenever it's written
augroup AutoSourceVimrc
    autocmd!
    autocmd BufWritePost vimrc ReloadVimrc
augroup END

" Help with syntax highlighting
" See also https://vim.fandom.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor
command! IdentifyHighlight echo 'highlight: ' . synIDattr(synID(line('.'), col('.'), 1), 'name') . ' → ' . synIDattr(synIDtrans(synID(line('.'), col('.'), 1)), 'name')

" Manage a lockfile for Vim plugins
let g:jqno_plugin_lockfile = $HOME . '/.vim/plugin.lock.vim'
function! s:JqnoPlugInitialInstall()
    PlugInstall
    execute 'source ' . g:jqno_plugin_lockfile
    qall
endfunction
command! JqnoPlugInitialInstall call <SID>JqnoPlugInitialInstall()
" Slight hack: this command omits the last letter from the command it replaces, so it doesn't replace the original but does get autocompleted first
command! PlugSnapsho execute 'PlugSnapshot! ' . g:jqno_plugin_lockfile
command! PlugRevert execute 'source ' . g:jqno_plugin_lockfile



" ***************************************
" ***  Plugin configurations
" ***************************************

" *** chrisbra/Colorizer
let g:colorizer_auto_filetype = 'css,html,scss'

" *** dense-analysis/ale
" Run linting on save only
let g:ale_lint_on_text_changed = 'never'

" *** drzel/vim-line-no-indicator
let g:line_no_indicator_chars = ['↑', '↗', '→', '↘', '↓']

" *** gcmt/wildfire
let g:wildfire_objects = ["i'", 'i"', 'i)', 'i]', 'i}', 'iv', 'if', 'ip', 'it']

" *** janko-m/vim-test
let test#strategy = 'dispatch'

" *** junegunn/fzf.vim
let g:fzf_command_prefix = 'Fzf'
let g:fzf_preview_window = {'options': '--delimiter : --nth 4..'}
" Key mappings within FZF to define how to open a file
" Ctrl+Q sends results to quickfix
let g:fzf_action = {
    \ 'enter': 'e',
    \ 'space': 'split',
    \ 'ctrl-q': 'sink'
    \ }
" Define colors
let g:fzf_colors = {
    \ 'fg':      ['fg', 'Normal'],
    \ 'bg':      ['bg', 'Normal'],
    \ 'hl':      ['fg', 'String'],
    \ 'fg+':     ['fg', 'CursorLine'],
    \ 'bg+':     ['bg', 'CursorLine'],
    \ 'hl+':     ['fg', 'String'],
    \ 'info':    ['fg', 'PreProc'],
    \ 'border':  ['fg', 'Ignore'],
    \ 'prompt':  ['fg', 'Conditional'],
    \ 'pointer': ['fg', 'Exception'],
    \ 'marker':  ['fg', 'Keyword'],
    \ 'spinner': ['fg', 'Label'],
    \ 'header':  ['fg', 'Comment']
    \ }
" Adds preview window to FzfAg
command! -bang -nargs=+ FzfAg
    \ call fzf#vim#ag_raw(<q-args>, fzf#vim#with_preview(g:fzf_preview_window), <bang>0)

" *** junegunn/goyo
let g:goyo_width=120

" *** liuchengxu/vista.vim
let g:vista#renderer#enable_icon = 0
let g:vista_executive_for = {
    \ 'java': 'vim_lsc',
    \ 'javascript': 'vim_lsc',
    \ 'python': 'vim_lsc',
    \ 'rust': 'vim_lsc',
    \ 'scala': 'vim_lsc',
    \ 'typescript': 'vim_lsc',
    \ }

" *** machakann/vim-sandwich
runtime macros/sandwich/keymap/surround.vim

" *** machakann/vim-swap
let g:swap_no_default_key_mappings = 1

" *** natebosch/vim-lsc
let g:lsc_enable_autocomplete = v:false

" Turn the invalid java.apply.workspaceEdit commands into an edit
" action which complies with the LSP spec
function! s:fixEdit(idx, maybeEdit) abort
    if !has_key(a:maybeEdit, 'command') ||
        \ !has_key(a:maybeEdit.command, 'command') ||
        \ a:maybeEdit.command.command !=# 'java.apply.workspaceEdit'
            return a:maybeEdit
    endif
    return {
        \ 'edit': a:maybeEdit.command.arguments[0],
        \ 'title': a:maybeEdit.command.title
        \ }
endfunction

function! s:fixEdits(actions) abort
    return map(a:actions, function('<SID>fixEdit'))
endfunction

let g:lsc_server_commands = {
    \ 'elm': 'elm-language-server --stdio',
    \ 'java': {
    \   'command': 'eclipse-jdt-ls.sh -data ' . getcwd(),
    \   'log_level': 'Warning',
    \   'response_hooks': {
    \     'textDocument/codeAction': function('<SID>fixEdits'),
    \   },
    \ },
    \ 'javascript': 'typescript-language-server --stdio',
    \ 'python': {
    \   'command': 'pyls',
    \   'workspace_config': { 'pyls': { 'plugins': {
    \     'mccabe': { 'enabled': v:false },
    \     'pycodestyle': { 'enabled': v:false },
    \     'pydocstyle': { 'enabled': v:false },
    \     'pyflakes': { 'enabled': v:false },
    \     'yapf': { 'enabled': v:false },
    \   } } }
    \ },
    \ 'rust': 'rls',
    \ 'scala': 'metals-vim',
    \ 'sbt.scala': 'metals-vim',
    \ 'sh': 'bash-language-server start',
    \ 'typescript': 'typescript-language-server --stdio',
    \ 'vim': {
    \   'command': 'vim-language-server --stdio',
    \   'message_hooks': { 'initialize': {
    \     'vimruntime': $VIMRUNTIME,
    \     'runtimepath': &runtimepath,
    \   } }
    \ }
    \ }

let g:lsc_auto_map = {
    \ 'GoToDefinition': '<leader>g]',
    \ 'GoToDefinitionSplit': '<leader>g<C-]>',
    \ 'FindReferences': '<leader>fr',
    \ 'NextReference': '<C-n>',
    \ 'PreviousReference': '<C-p>',
    \ 'FindImplementations': '<leader>gi',
    \ 'FindCodeActions': '<leader>r<cr>',
    \ 'Rename': '<leader>rr',
    \ 'ShowHover': 'K',
    \ 'DocumentSymbol': '<leader>fs',
    \ 'WorkspaceSymbol': '<leader>fS',
    \ 'SignatureHelp': '<leader>ms',
    \ 'Completion': 'omnifunc',
    \ }

" *** plasticboy/vim-markdown
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_folding_disabled = 1

" *** scrooloose/NERDTree
let NERDTreeMinimalUI = 1
augroup NERDTree
    autocmd!
    autocmd BufEnter * if (winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree()) | quit | endif
augroup END

" *** SirVer/ultisnips
let g:UltiSnipsExpandTrigger = '<F19>' " It would be better to map <Nop> but it doesn't register correctly and conflicts with the regular < symbol.
let g:UltiSnipsJumpForwardTrigger = '<Tab>'
let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'

" *** wincent/terminus
" Having this enabled causes garbage characters to be printedin :terminal when switching macOS spaces
let g:TerminusFocusReporting=0



" ***************************************
" ***  Mappings
" ***************************************

" *** No prefix: general mappings

" Toggle Goyo for distraction-free writing
nnoremap <F12> :Goyo<CR>

" Pressing up in a long line gets you to the above line 'in the screen',
" but if you precede it with a count, you get the old behavior
" and if the count > 5, we'll also add it to the jump list so we can do C-O and C-I
nnoremap <expr> j v:count ? (v:count > 5 ? "m'" . v:count : '') . 'j' : 'gj'
nnoremap <expr> k v:count ? (v:count > 5 ? "m'" . v:count : '') . 'k' : 'gk'
vnoremap <expr> j v:count ? (v:count > 5 ? "m'" . v:count : '') . 'j' : 'gj'
vnoremap <expr> k v:count ? (v:count > 5 ? "m'" . v:count : '') . 'k' : 'gk'

" Keep the visual selection after < and > so we can repeat these buttons
" instead of tring to find .
vnoremap < <gv
vnoremap > >gv
" Allow for easy window resizing
" (˙∆˚¬ are Alt+hjkl on macOS)
noremap <silent> ˙ :call ResizeLikeTmux('h', 1)<CR>
noremap <silent> ∆ :call ResizeLikeTmux('j', 1)<CR>
noremap <silent> ˚ :call ResizeLikeTmux('k', 1)<CR>
noremap <silent> ¬ :call ResizeLikeTmux('l', 1)<CR>
" Mappings for vim-commentary
xmap \ <Plug>Commentary
nmap \ <Plug>Commentary
omap \ <Plug>Commentary
nmap \\ <Plug>CommentaryLine
nmap <leader>\ <Plug>Commentary<Plug>Commentary
" Mappings from Unimpaired that I actually use
map <silent> [b :bprevious<CR>
map <silent> ]b :bnext<CR>
map <silent> [q :cprevious<CR>
map <silent> ]q :cnext<CR>
map <silent> [Q :cfirst<CR>
map <silent> ]Q :clast<CR>
" Handy ALE mappings in Unimpaired style
map <silent> [W <Plug>(ale_first)
map <silent> [w <Plug>(ale_previous)
map <silent> ]w <Plug>(ale_next)
map <silent> ]W <Plug>(ale_last)
" Center on the line with the match when searching
nnoremap n nzz
nnoremap N Nzz
" When finding `=` include the whitespace around it
nnoremap t= /\s*=<CR>:nohls<CR>
nnoremap T= ?=\s*?e<CR>:nohls<CR>
" ToggleMovement : 0 moves to beginning of text first, then to beginning of line
nnoremap <silent> 0 :call ToggleMovement('^', '0')<CR>

" Close extraneous windows
nnoremap <silent> <leader><Esc> :pclose<CR>:cclose<CR>:lclose<CR>:Vista!<CR>:NERDTreeClose<CR>

" *** Prefix <leader><leader>: change settings
nnoremap <silent> <leader><leader>2 :call SetTabstop(2)<CR>:echo "Indentation level: 2"<CR>
nnoremap <silent> <leader><leader>4 :call SetTabstop(4)<CR>:echo "Indentation level: 4"<CR>
nnoremap <silent> <leader><leader>8 :call SetTabstop(8)<CR>:echo "Indentation level: 8"<CR>
nnoremap <silent> <leader><leader>0 :set noexpandtab nosmarttab tabstop=4 shiftwidth=4 softtabstop=4<CR>:echo "Indentation level: tab"<CR>
nnoremap <silent> <leader><leader>t :call ToggleListChars()<CR>
nnoremap <silent> <leader><leader>w :call ToggleWrap()<CR>
nnoremap <silent> <leader><leader><leader> za

" *** Prefix <leader>f: finding things
nnoremap <leader>f<space> :Vista finder<CR>
nnoremap <leader>fb :FzfBuffers<CR>
nnoremap <leader>ff :FzfFiles<CR>
nnoremap <leader>fg :FzfAg<Space>
nnoremap <leader>fh :FzfHelptags<CR>
nnoremap <leader>ft :FzfTags<CR>
nnoremap <leader>fo :FzfBTags<CR>
nnoremap <leader>f* "ayiw:FzfAg <C-R>a<CR>
nnoremap <leader>f] :sp<CR>:exec("tag " . expand("<cword>"))<CR>
nnoremap <leader>fd :Dash<CR>
nnoremap <leader>fn :NERDTreeToggle<CR>
nnoremap <leader>fN :NERDTreeFind<CR>
" nnoremap <leader>fr :LSClientFindReferences<CR> " Managed by vim-lsc
" nnoremap <leader>fs :LSClientDocumentSymbol<CR> " Managed by vim-lsc
" nnoremap <leader>fS :LSClientWorkspaceSymbol<CR> " Managed by vim-lsc
nnoremap <leader>fv :Vista<CR><C-W><C-P>


" " *** Prefix <leader>g: going to places and Gitting things
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :0Glog!<CR>
" nnoremap <leader>gd :LSClientGoToDefinition<CR> " Managed by vim-lsc
" nnoremap <leader>gD :LSClientGoToDefinitionSplit<CR> " Managed by vim-lsc
" nnoremap <leader>gi :LSClientFindImllementation<CR> " Managed by vim-lsc

" " *** Prefix <leader>m: running make
nnoremap <leader>mf magggqG`a
vnoremap <leader>mf gq
nnoremap <leader>mm :Make<CR>
" nnoremap <leader>ms :LSClientSignatureHelp<CR> " Managed by vim-lsc

" *** Prefix <leader>t: running tests
nnoremap <leader>ta :TestSuite<CR>
nnoremap <leader>tf :TestFile<CR>
nnoremap <leader>tt :TestNearest<CR>

" *** Prefix <leader>r: refactorings
nmap <leader>rv <Plug>(extractVariableNormal)
vmap <leader>rv <Plug>(extractVariableVisual)
nnoremap <Leader>r* /\<<C-R>=expand('<cword>')<CR>\>\C<CR>``cgn
nnoremap <Leader>r# ?\<<C-R>=expand('<cword>')<CR>\>\C<CR>``cgN
nmap <leader>r< <Plug>(swap-prev)
nmap <leader>r> <Plug>(swap-next)
" nnoremap <leader>rr :LSClientRename<CR> " Managed by vim-lsc
" nnoremap <leader>r<cr> :LSClientFindCodeActions<CR> " Managed by vim-lsc

" *** Prefix <leader>b: buffers
nnoremap <silent> <leader>bb :b#<CR>
nnoremap <silent> <leader>bd :bp\|bd #<CR>
nnoremap <silent> <leader>b<Esc> :%bd\|e#<CR>:echo "All other buffers closed."<CR>

" *** Prefix <leader>w: windows
nnoremap <leader>w_ <C-W>_
nnoremap <leader>w= <C-W>=
nmap <leader>w<space> <Plug>(zoom-toggle)

" *** Command-line mode
" Expand %% to the directory of the currently open file, in Command-Line mode.
cnoremap %% <C-R>=expand('%:h').'/'<CR>

