#!/bin/bash

# Check if we're in a Git repo
if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    echo "Not in a git repository"
    exit 1
fi

# Check if the user provided a command-line argument
if [[ -z "$1" ]]; then
    echo "Usage: git review [<pr-number> | done]"
    exit 1
fi

# Determine name of main/master branch
main_branch=$(git rev-parse --abbrev-ref origin/HEAD)

if [[ "$1" == "done" ]]; then

    # Determine name of current branch
    current_branch=$(git rev-parse --abbrev-ref HEAD)

    # Check if we're on a review branch
    if ! [[ $current_branch =~ ^review/ ]]; then
        echo "This is not a review branch"
        exit 1
    fi

    # Clean up the branch
    git reset --hard > /dev/null 2>&1
    git clean -fd

    # Go back to main (the variable has an 'origin/' prefix; strip that)
    git checkout "${main_branch#origin/}" > /dev/null 2>&1

    # Remove review branch
    git branch -D "$current_branch" > /dev/null 2>&1

    echo "Done reviewing $current_branch"

else

    pr_number=$1

    # Check if there's changes
    if git status --porcelain | grep -q '^'; then
        echo "There are changes or untracked files in the repository"
        exit 1
    fi

    # Check if the GitHub CLI command is available
    if ! command -v gh > /dev/null 2>&1; then
        echo "GitHub CLI not available"
        exit 1
    fi

    # Make sure we have everything
    git fetch

    # Determine the name of the PR's branch (using GitHub CLI)
    pr_branch=$(gh pr view "$pr_number" --json headRefName --jq '.headRefName')

    # Remove review branch if it exists already
    git branch -D "review/$pr_branch" > /dev/null 2>&1

    # Checkout the PR's branch into a new branch which mirror's the PR's branch, but with 'review/' in front
    git checkout -b "review/$pr_branch" "origin/$pr_branch" > /dev/null 2>&1

    # Fail if the branch doesn't exist
    if [[ $? != 0 ]]; then
        echo "Branch doesn't exist (was the PR already merged?)"
        exit 1
    fi

    # Sever the link with the remote branch, so we don't accidentally push something to it
    git branch --unset-upstream "review/$pr_branch"

    # Find the point where the PR split off from main
    mergebase=$(git merge-base "$main_branch" "review/$pr_branch")

    # Check if this all worked correctly
    if [[ -z "$mergebase" ]]; then
        echo "Could not determine a mergebase for branch $pr_branch"
        exit 1
    fi

    # Reset the changes made in the PR so we can look at them in our editor
    git reset --mixed "$mergebase" > /dev/null

    echo "Ready to review PR $pr_number from branch $pr_branch"
fi
